#
# Copyright 2020 - The World Tree and the The World Tree contributors.
# SPDX-License-Identifier: MIT
#

"""Dump of old C/C++ toolchain code to have as a back-up."""

load(
    "@rules_cc//cc:cc_toolchain_config_lib.bzl",
    "feature",
    "feature_set",
    "flag_group",
    "flag_set",
    "with_feature_set",
)
load(
    "@rules_cc//cc:action_names.bzl",
    "ACTION_NAMES",
)
load(
    "//asgard/build/toolchains/cpp/features:definitions.bzl",
    "ALL_COMPILE_ACTIONS",
    "ALL_CPP_COMPILE_ACTIONS",
    "ALL_C_COMPILE_ACTIONS",
    "ALL_LINK_ACTIONS",
    "ALL_LTO_INDEX_ACTIONS",
)

def dump(ctx):
    features = [
        feature(
            name = "unfiltered_compile_flags",
            enabled = True,
        ),
        feature(
            name = "default_compile_flags",
            enabled = True,
        ),
        feature(
            name = "supports_pic",
            enabled = True,
        ),
        feature(
            name = "preprocessor_defines",
            enabled = True,
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.preprocess_assemble,
                        ACTION_NAMES.linkstamp_compile,
                        ACTION_NAMES.c_compile,
                        ACTION_NAMES.cpp_compile,
                        ACTION_NAMES.cpp_header_parsing,
                        ACTION_NAMES.cpp_module_compile,
                        ACTION_NAMES.clif_match,
                    ],
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-D%{preprocessor_defines}",
                            ],
                            iterate_over = "preprocessor_defines",
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "compiler_headers",
            flag_sets = [
                flag_set(
                    actions = ALL_COMPILE_ACTIONS,
                    # TODO(wpieterse): This needs to be added as a dependency on the core libraries.
                    # flag_groups = [
                    #     flag_group(
                    #         flags = [
                    #             "-isystem",
                    #             "external/org_llvm_shared/include/c++/v1/",
                    #             "-isystem",
                    #             "external/org_llvm_shared/lib/clang/8.0.0/include/",
                    #         ],
                    #     ),
                    # ],
                ),
            ],
        ),
        feature(
            name = "sysroot",
            enabled = True,
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.preprocess_assemble,
                        ACTION_NAMES.linkstamp_compile,
                        ACTION_NAMES.c_compile,
                        ACTION_NAMES.cpp_compile,
                        ACTION_NAMES.cpp_header_parsing,
                        ACTION_NAMES.cpp_module_compile,
                        ACTION_NAMES.cpp_module_codegen,
                        ACTION_NAMES.lto_backend,
                        ACTION_NAMES.clif_match,
                    ] + ALL_LINK_ACTIONS + ALL_LTO_INDEX_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "--sysroot=%{sysroot}",
                            ],
                            expand_if_available = "sysroot",
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "pic",
            enabled = True,
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.assemble,
                        ACTION_NAMES.preprocess_assemble,
                        ACTION_NAMES.linkstamp_compile,
                        ACTION_NAMES.c_compile,
                        ACTION_NAMES.cpp_compile,
                        ACTION_NAMES.cpp_module_codegen,
                        ACTION_NAMES.cpp_module_compile,
                    ],
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-fPIC",
                            ],
                            expand_if_available = "pic",
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "per_object_debug_info",
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.assemble,
                        ACTION_NAMES.preprocess_assemble,
                        ACTION_NAMES.c_compile,
                        ACTION_NAMES.cpp_compile,
                        ACTION_NAMES.cpp_module_codegen,
                    ],
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-gsplit-dwarf",
                            ],
                            expand_if_available = "per_object_debug_info_file",
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "warnings",
            flag_sets = [
                flag_set(
                    actions = ALL_COMPILE_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-Wall",
                                "-Wextra",
                            ],
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "determinism",
            flag_sets = [
                flag_set(
                    actions = ALL_C_COMPILE_ACTIONS + ALL_CPP_COMPILE_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-Wno-builtin-macro-redefined",
                                "-D__DATE__=\"redacted\"",
                                "-D__TIMESTAMP__=\"redacted\"",
                                "-D__TIME__=\"redacted\"",
                            ],
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "cpp_no_rtti",
            flag_sets = [
                flag_set(
                    actions = ALL_CPP_COMPILE_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-fno-rtti",
                            ],
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "cpp_no_exceptions",
            flag_sets = [
                flag_set(
                    actions = ALL_CPP_COMPILE_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-fno-exceptions",
                            ],
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "cpp_17",
            flag_sets = [
                flag_set(
                    actions = ALL_CPP_COMPILE_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-std=c++17",
                            ],
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "fdo_instrument",
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.c_compile,
                        ACTION_NAMES.cpp_compile,
                    ] + ALL_LINK_ACTIONS + ALL_LTO_INDEX_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-fprofile-generate=%{fdo_instrument_path}",
                                "-fno-data-sections",
                            ],
                            expand_if_available = "fdo_instrument_path",
                        ),
                    ],
                ),
            ],
            provides = [
                "profile",
            ],
        ),
        feature(
            name = "fdo_optimize",
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.c_compile,
                        ACTION_NAMES.cpp_compile,
                    ],
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-fprofile-use=%{fdo_profile_path}",
                                "-fprofile-correction",
                            ],
                            expand_if_available = "fdo_profile_path",
                        ),
                    ],
                ),
            ],
            provides = [
                "profile",
            ],
        ),
        feature(
            name = "cs_fdo_instrument",
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.c_compile,
                        ACTION_NAMES.cpp_compile,
                        ACTION_NAMES.lto_backend,
                    ] + ALL_LINK_ACTIONS + ALL_LTO_INDEX_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-fcs-profile-generate=%{cs_fdo_instrument_path}",
                            ],
                            expand_if_available = "cs_fdo_instrument_path",
                        ),
                    ],
                ),
            ],
            provides = [
                "csprofile",
            ],
        ),
        feature(
            name = "cs_fdo_optimize",
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.lto_backend,
                    ],
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-fprofile-use=%{fdo_profile_path}",
                                "-Xclang-only=-Wno-profile-instr-unprofiled",
                                "-Xclang-only=-Wno-profile-instr-out-of-date",
                                "-fprofile-correction",
                            ],
                            expand_if_available = "fdo_profile_path",
                        ),
                    ],
                ),
            ],
            provides = [
                "csprofile",
            ],
        ),
        feature(
            name = "fdo_prefetch_hints",
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.c_compile,
                        ACTION_NAMES.cpp_compile,
                        ACTION_NAMES.lto_backend,
                    ],
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-Xclang-only=-mllvm",
                                "-Xclang-only=-prefetch-hints-file=%{fdo_prefetch_hints_path}",
                            ],
                            expand_if_available = "fdo_prefetch_hints_path",
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "autofdo",
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.c_compile,
                        ACTION_NAMES.cpp_compile,
                    ],
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-fauto-profile=%{fdo_profile_path}",
                                "-fprofile-correction",
                            ],
                            expand_if_available = "fdo_profile_path",
                        ),
                    ],
                ),
            ],
            provides = [
                "profile",
            ],
        ),
        feature(
            name = "coverage",
            provides = [
                "profile",
            ],
        ),
        feature(
            name = "llvm_coverage_map_format",
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.preprocess_assemble,
                        ACTION_NAMES.c_compile,
                        ACTION_NAMES.cpp_compile,
                        ACTION_NAMES.cpp_module_compile,
                        ACTION_NAMES.objc_compile,
                        ACTION_NAMES.objcpp_compile,
                    ],
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-fprofile-instr-generate",
                                "-fcoverage-mapping",
                            ],
                        ),
                    ],
                ),
                flag_set(
                    actions = ALL_LINK_ACTIONS + ALL_LTO_INDEX_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-fprofile-instr-generate",
                            ],
                        ),
                    ],
                ),
            ],
            requires = [
                feature_set(
                    features = [
                        "coverage",
                    ],
                ),
            ],
            provides = [
                "profile",
            ],
        ),
        feature(
            name = "gcc_coverage_map_format",
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.preprocess_assemble,
                        ACTION_NAMES.c_compile,
                        ACTION_NAMES.cpp_compile,
                        ACTION_NAMES.cpp_module_compile,
                        ACTION_NAMES.objc_compile,
                        ACTION_NAMES.objcpp_compile,
                        "objc-executable",
                        "objc++-executable",
                    ],
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-fprofile-arcs",
                                "-ftest-coverage",
                            ],
                            expand_if_available = "gcov_gcno_file",
                        ),
                    ],
                ),
                flag_set(
                    actions = ALL_LINK_ACTIONS + ALL_LTO_INDEX_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "--coverage",
                            ],
                        ),
                    ],
                ),
            ],
            requires = [
                feature_set(
                    features = [
                        "coverage",
                    ],
                ),
            ],
            provides = [
                "profile",
            ],
        ),
        feature(
            name = "library_search_directories",
            flag_sets = [
                flag_set(
                    actions = ALL_LINK_ACTIONS + ALL_LTO_INDEX_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-L%{library_search_directories}",
                            ],
                            iterate_over = "library_search_directories",
                            expand_if_available = "library_search_directories",
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "runtime_library_search_directories",
            flag_sets = [
                flag_set(
                    actions = ALL_LINK_ACTIONS + ALL_LTO_INDEX_ACTIONS,
                    flag_groups = [
                        flag_group(
                            iterate_over = "runtime_library_search_directories",
                            flag_groups = [
                                flag_group(
                                    flags = [
                                        "-rpath,$EXEC_ORIGIN/%{runtime_library_search_directories}",
                                    ],
                                    expand_if_true = "is_cc_test",
                                ),
                                flag_group(
                                    flags = [
                                        "-rpath,$ORIGIN/%{runtime_library_search_directories}",
                                    ],
                                    expand_if_false = "is_cc_test",
                                ),
                            ],
                            expand_if_available = "runtime_library_search_directories",
                        ),
                    ],
                    with_features = [
                        with_feature_set(
                            features = [
                                "static_link_cpp_runtimes",
                            ],
                        ),
                    ],
                ),
                flag_set(
                    actions = ALL_LINK_ACTIONS + ALL_LTO_INDEX_ACTIONS,
                    flag_groups = [
                        flag_group(
                            iterate_over = "runtime_library_search_directories",
                            flag_groups = [
                                flag_group(
                                    flags = [
                                        "-rpath,$ORIGIN/%{runtime_library_search_directories}",
                                    ],
                                ),
                            ],
                            expand_if_available = "runtime_library_search_directories",
                        ),
                    ],
                    with_features = [
                        with_feature_set(
                            not_features = [
                                "static_link_cpp_runtimes",
                            ],
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "dynamic_library_linker_tool",
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.cpp_link_dynamic_library,
                        ACTION_NAMES.cpp_link_nodeps_dynamic_library,
                        ACTION_NAMES.lto_index_for_dynamic_library,
                        ACTION_NAMES.lto_index_for_nodeps_dynamic_library,
                    ],
                    flag_groups = [
                        flag_group(
                            flags = [
                                " + cppLinkDynamicLibraryToolPath + ",
                            ],
                            expand_if_available = "generate_interface_library",
                        ),
                    ],
                    with_features = [
                        with_feature_set(
                            features = [
                                "supports_interface_shared_libraries",
                            ],
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "shared_flag",
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.cpp_link_dynamic_library,
                        ACTION_NAMES.cpp_link_nodeps_dynamic_library,
                        ACTION_NAMES.lto_index_for_dynamic_library,
                        ACTION_NAMES.lto_index_for_nodeps_dynamic_library,
                    ],
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-shared",
                            ],
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "build_interface_libraries",
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.cpp_link_dynamic_library,
                        ACTION_NAMES.cpp_link_nodeps_dynamic_library,
                        ACTION_NAMES.lto_index_for_dynamic_library,
                        ACTION_NAMES.lto_index_for_nodeps_dynamic_library,
                    ],
                    flag_groups = [
                        flag_group(
                            flags = [
                                "%{generate_interface_library}",
                                "%{interface_library_builder_path}",
                                "%{interface_library_input_path}",
                                "%{interface_library_output_path}",
                            ],
                            expand_if_available = "generate_interface_library",
                        ),
                    ],
                    with_features = [
                        with_feature_set(
                            features = [
                                "supports_interface_shared_libraries",
                            ],
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "force_pic_flags",
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.cpp_link_executable,
                        ACTION_NAMES.lto_index_for_executable,
                    ],
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-pie",
                            ],
                            expand_if_available = "force_pic",
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "strip_debug_symbols",
            flag_sets = [
                flag_set(
                    actions = ALL_LINK_ACTIONS + ALL_LTO_INDEX_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-S",
                            ],
                            expand_if_available = "strip_debug_symbols",
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "linkstamps",
            flag_sets = [
                flag_set(
                    actions = ALL_LINK_ACTIONS + ALL_LTO_INDEX_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "%{linkstamp_paths}",
                            ],
                            iterate_over = "linkstamp_paths",
                            expand_if_available = "linkstamp_paths",
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "symbol_counts",
            flag_sets = [
                flag_set(
                    actions = ALL_LINK_ACTIONS + ALL_LTO_INDEX_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "--print-symbol-counts=%{symbol_counts_output}",
                            ],
                            expand_if_available = "symbol_counts_output",
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "static_libgcc",
            enabled = True,
            flag_sets = [
                flag_set(
                    actions = [
                        ACTION_NAMES.cpp_link_executable,
                        ACTION_NAMES.cpp_link_dynamic_library,
                        ACTION_NAMES.lto_index_for_executable,
                        ACTION_NAMES.lto_index_for_dynamic_library,
                    ],
                    flag_groups = [
                        flag_group(
                            flags = [
                                "-static-libgcc",
                            ],
                        ),
                    ],
                    with_features = [
                        with_feature_set(
                            features = [
                                "static_link_cpp_runtimes",
                            ],
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "fission_support",
            flag_sets = [
                flag_set(
                    actions = ALL_LINK_ACTIONS + ALL_LTO_INDEX_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "--gdb-index",
                            ],
                            expand_if_available = "is_using_fission",
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "user_compile_flags",
            flag_sets = [
                flag_set(
                    actions = ALL_COMPILE_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "%{user_compile_flags}",
                            ],
                            iterate_over = "user_compile_flags",
                            expand_if_available = "user_compile_flags",
                        ),
                    ],
                ),
            ],
        ),
        feature(
            name = "user_link_flags",
            flag_sets = [
                flag_set(
                    actions = ALL_LINK_ACTIONS + ALL_LTO_INDEX_ACTIONS,
                    flag_groups = [
                        flag_group(
                            flags = [
                                "%{user_link_flags}",
                            ],
                            iterate_over = "user_link_flags",
                            expand_if_available = "user_link_flags",
                        ),
                    ],
                ),
            ],
        ),
    ]

    return features
