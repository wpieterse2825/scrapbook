load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
load("//build/rules:build.bzl", "level_3_implementation_dependencies")
load("//build/rules/header:platform_export_header.bzl", "platform_export_header")
load("//build/rules/cpp:cpp_library.bzl", "cpp_library")
load("//frameworks:build_defines.bzl", "LEVEL_1")
load("//frameworks/core:build_defines.bzl", "LEVEL_2")
load("//frameworks/core/types:build_defines.bzl", "LEVEL_3")
load(
    "//frameworks/core/types/common:build_defines.bzl",
    "BUILD_DEFINE_GENERAL",
    "IMPLEMENTATION_DEFAULT",
    "LEVEL_3_PLATFORM",
)
load("//frameworks/core/types/common/general:build_defines.bzl", LEVEL_3_IMPLEMENTATION_GENERAL = "LEVEL_3_IMPLEMENTATION")

string_flag(
    name = "implementation",
    build_setting_default = IMPLEMENTATION_DEFAULT,
    values = [LEVEL_3_IMPLEMENTATION_GENERAL],
)

config_setting(
    name = "is_implementation_general",
    flag_values = {
        ":implementation": LEVEL_3_IMPLEMENTATION_GENERAL,
    },
    visibility = ["//frameworks/core/types:__subpackages__"],
)

cpp_library(
    name = "export",
    hdrs = ["common.hpp"],
    defines = select({
        ":is_implementation_general": [BUILD_DEFINE_GENERAL],
    }),
    visibility = ["//frameworks/core/types:__pkg__"],
    deps = select({
        ":is_implementation_general": level_3_implementation_dependencies(
            level_1 = LEVEL_1,
            level_2 = LEVEL_2,
            level_3 = LEVEL_3,
            level_3_implementation = LEVEL_3_IMPLEMENTATION_GENERAL,
            level_3_platform = LEVEL_3_PLATFORM,
        ),
    }),
)

platform_export_header(
    name = "%s_export_header" % LEVEL_3_PLATFORM,
    level_1 = LEVEL_1,
    level_2 = LEVEL_2,
    level_3 = LEVEL_3,
    level_3_platform = LEVEL_3_PLATFORM,
)
